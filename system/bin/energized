#!/system/bin/sh
# ======================================================================
# Module: Energized Protection
# License: CC BY-NC-SA 4.0; https://nenergized.pro/license
# Copyright (C) 2018 Energized Protection ϟ All Rights Reserved.
# ======================================================================
# Script Begins -
# ========================================

function show_help() {
    echo "Usage:"
    echo "energized                               Run interactively."
    echo "energized -h, --help                    Display this help message."
    echo "energized -u, --update                  Update lists."
    echo "energized -b, --backup                  Create a backup."
    echo "energized -c, --clear                   Create a backup and clear hosts."
    echo "energized -r, --restore                 Restore a backup if one exists."
    echo "energized -a, --apply <pack>            Apply a pack by number."
    echo "energized -e, --extension <code>        Apply an extension by code."
    # TODO
    # echo "energized -w, --whitelist <domain ...>  Whitelist domain(s)."
    # echo "energized -m, --blacklist <domain ...>  Blacklist domain(s)."
}

# Check if we have arguments to parse
INTERACTIVE=[ $# -gt 0 ]

function echoer() {
    $INTERACTIVE && echo "$@"
    return 0
}

function errorer {
    $INTERACTIVE && echo "$@" >&2
    return 0
}

function sleeper {
    $INTERACTIVE && sleep "$@"
    return 0
}

function clearer {
    $INTERACTIVE && clear
    return 0
}

# Colors
# ----------------------------------------
BL='\e[01;90m' >/dev/null 2>&1 # Black
R='\e[01;91m' >/dev/null 2>&1  # Red
G='\e[01;92m' >/dev/null 2>&1  # Green
Y='\e[01;93m' >/dev/null 2>&1  # Yellow
B='\e[01;94m' >/dev/null 2>&1  # Blue
P='\e[01;95m' >/dev/null 2>&1  # Purple
C='\e[01;96m' >/dev/null 2>&1  # Cyan
W='\e[01;97m' >/dev/null 2>&1  # White
LG='\e[01;37m' >/dev/null 2>&1 # Light Gray
N='\e[0m' >/dev/null 2>&1      # Null
# ----------------------------------------

# Define Energized Protection Directory
# ----------------------------------------
DIRECTORY=/sdcard/EnergizedProtection

rm -f $DIRECTORY/filter &>/dev/null      || errorer "Failed to remove $DIRECTORY/filter"
rm -f $DIRECTORY/deltaFilter &>/dev/null || errorer "Failed to remove $DIRECTORY/deltaFilter"
rm -f $DIRECTORY/deltaReadme &>/dev/null || errorer "Failed to remove $DIRECTORY/deltaReadme"

# Divider
# ----------------------------------------
divider="-------------------------------------------------"

# Mount Magisk
# ----------------------------------------
if [ ! -d /sbin/.core/mirror/bin ]; then
    mkdir -p /sbin/.core/mirror/bin   || errorer "Failed to create /sbin/.core/mirror/bin"
    mount -o bind /data/adb/magisk /sbin/.core/mirror/bin || errorer "Failed to mount magisk binds"
fi

# Create Energized Protection Directory
# ----------------------------------------
if [ ! -d $DIRECTORY ]; then
    mkdir -p $DIRECTORY || echo "Failed to create $DIRECTORY" >&2
fi

# Versioning & Date
# ----------------------------------------
version=$Y'canelé'$N >/dev/null 2>&1
released=$G'Oct 02, 2018'$N >/dev/null 2>&1
saythanks='https://saythanks.io/to/AdroitAdorKhan' >/dev/null 2>&1
date=$(date "+%d.%m.%Y %H:%M:%S")

# Start Echos
# ----------------------------------------
if $INTERACTIVE; then
    clearer
    echoer ''
    echoer -e $Y"      _____  _________  _____________  _______  "$N
    echoer -e $Y"     / __/ |/ / __/ _ \/ ___/  _/_  / / __/ _ \ "$N
    echoer -e $Y"    / _//    / _// , _/ (_ // /  / /_/ _// // / "$N
    echoer -e $Y"   /___/_/|_/___/_/|_|\___/___/ /___/___/____/  "$N
    echoer ''
    echoer -e $Y'      P   R   O   T   E   C   T   I   O   N'$N
    sleeper 0.1
    echoer "$divider"
    echoer "     Version: $version | Updated: $released"
    sleeper 0.1
    echoer "$divider"
    sleeper 0.1
    echoer ""
    sleeper 0.1
    echoer -e $Y'                  energized.pro'$N
    echoer ""
    sleeper 0.1
    echoer "                 CC BY-NC-SA 4.0"
    echoer ''
    sleeper 0.5
    echoer -n -e $Y'                        •'$N
    sleeper 0.2
    echoer -n -e $Y'•'$N
    sleeper 0.3
    echoer -n -e $Y'•'$N
    sleeper 0.2
    sleeper 2
    clearer
fi
# Disclaimer
# ----------------------------------------
if $INTERACTIVE; then
    echoer -e "$divider"
    echoer -e $R'D I S C L A I M E R'$N
    echoer -e "$divider"
    echoer -e $R"THIS IS SIMPLY A MODULE TO CHANGE YOUR SYSTEMLESS"$N
    echoer -e $R"HOSTS FILE. IF YOU DON'T KNOW WHAT YOU ARE DOING,"$N
    echoer -e $R"THEN PLEASE DON'T PROCEED. I WON'T BE RESPONSIBLE"$N
    echoer -e $R"FOR THE MESS YOU CREATE."$N
    echoer ''
    echoer -e $Y"ENERGIZED BASIC/PORN/ULTIMATE/UNIFIED PACKS ARE"$N
    echoer -e $Y"BIGGER IN SIZE. USE THEM, IF YOUR DEVICE CAN"$N
    echoer -e $Y"HANDLE THE LOAD."$N
    echoer -e "$divider"
    curl -sf http://go.energized.pro/web >/dev/null
    sleeper 4
fi
# Check Systemless Support
# ----------------------------------------
if $INTERACTIVE; then
    clearer
    echoer "[+] Checking Systemless Support"
    sleeper 0.2
    clearer
    echoer "[+] Checking Systemless Support."
    sleeper 0.2
    clearer
    echoer "[+] Checking Systemless Support.."
    sleeper 0.2
    clearer
    echoer "[+] Checking Systemless Support..."
    sleeper 0.5
    clearer
    echoer "[+] Checking Systemless Support.."
    sleeper 0.2
    clearer
    echoer "[+] Checking Systemless Support."
    sleeper 0.2
    clearer
    echoer "[+] Checking Systemless Support"
    sleeper 0.2
    clearer
fi
# Check if the Systemless Hosts
# ----------------------------------------
HOST=/sbin/.magisk/img/hosts/system/etc/hosts
# Check for old non-module-style Systemless Hosts and update path
if [[ "$(/sbin/magisk -c)" == 17.3* ]]; then
    HOST=/sbin/.core/img/.core/hosts
fi
if [ ! -f $HOST ]; then
    clearer
    sleeper 0.1
    echoer -e $R"$divider"$N
    echoer ''
    sleeper 0.1
    echoer -e $R"[-] Systemless Hosts isn't enabled!"$N
    sleeper 0.1
    echoer -e $G"[+] Enable it in 'Magisk Manager > Settings > Systemless Hosts'"$N
    sleeper 0.1
    echoer -e $W"[+] Re-run script after enabling Systemless Hosts!"$N
    sleeper 0.2
    echoer -e $R"[-] Quitting Script!"$N
    echoer ''
    sleeper 0.1
    echoer -e $R"$divider"$N
    sleeper 3
    exit 0
else
    clearer
    sleeper 0.1
    echoer -e $Y"$divider"$N
    echoer ''
    echoer -e $W"[+] Superb Dude! Systemless Hosts is enabled! ^_^"$N
    echoer ''
    sleeper 0.1
    echoer -e $Y"$divider"$N
    sleeper 1
fi
clearer

# Check Other Adblocker
# ----------------------------------------
if [ -d /data/data/org.adaway/ ] || [ -d /system/app/org.adaway/ ] || [ -d /system/priv-app/org.adaway/ ]; then
    clearer
    echoer -e $R"[-] Other adblocker is detected!"$N
    sleeper 0.3
    echoer ''
    echoer -e $Y"[+] Make sure to disable them, to avoid any issue using Energized!"$N
    sleeper 2
    elif [ -d /data/data/ru.dixl0f0s.unifiedhostsmanager/ ] || [ -d /system/app/ru.dixl0f0s.unifiedhostsmanager/] || [ -d /system/priv-app/ru.dixl0f0s.unifiedhostsmanager/ ]; then
    clearer
    echoer -e $R"[-] Other adblocker is detected!"$N
    sleeper 0.3
    echoer ''
    echoer -e $Y"[+] Make sure to disable them, to avoid any issue using Energized!"$N
    sleeper 2
else
    clearer
    sleeper 0.1
    echoer -e $Y"$divider"$N
    echoer ''
    echoer -e $W"  [+] Awesome! No other adblocker detected! ^_^"$N
    echoer ''
    echoer -e $Y"$divider"$N
    sleeper 2
fi

# Check Energized Directory
# ----------------------------------------
if $INTERACTIVE; then
    clearer
    echoer "[+] Checking Energized Directory."
    sleeper 0.1
    clearer
    echoer "[+] Checking Energized Directory.."
    sleeper 0.2
    clearer
    echoer "[+] Checking Energized Directory..."
    sleeper 0.1
    clearer
fi

# Create Cache Directory
# ----------------------------------------
if [ ! -d $DIRECTORY/cache ]; then
    mkdir -p $DIRECTORY/cache || errorer "Failed to create $DIRECTORY/cache"
    echoer -e "\n[+] Setting up working cache directory.\n"
fi
# Check Whitelist
# ----------------------------------------
if [ ! -f $DIRECTORY/blacklist ]; then
    clearer
    echoer -e "\n[+] Creating Blacklist.\n"
    touch $DIRECTORY/blacklist || errorer "Failed to create $DIRECTORY/blacklist"
    sleeper 0.2
fi
# Check Blacklist
# ----------------------------------------
if [ ! -f $DIRECTORY/whitelist ]; then
    clearer
    echoer -e "[+] Creating Whitelist."
    touch $DIRECTORY/whitelist
    sleeper 0.2
fi
# Check Redirectlist
# ----------------------------------------
if [ ! -f $DIRECTORY/redirectlist ]; then
    clearer
    echoer -e "[+] Creating Redirectlist."
    touch $DIRECTORY/redirectlist
    sleeper 0.2
fi
# Check Temp
# ----------------------------------------
if [ ! -f $DIRECTORY/cache/temp ]; then
    clearer
    echoer -e "[+] Creating temporary cache..."
    touch $DIRECTORY/cache/temp
    sleeper 0.2
fi
# Check Porn Temp
# ----------------------------------------
if [ ! -f $DIRECTORY/cache/ptemp ]; then
    clearer
    echoer -e "[+] Creating Temp..."
    touch $DIRECTORY/cache/ptemp
    sleeper 0.2
fi
# Check Social Temp
# ----------------------------------------
if [ ! -f $DIRECTORY/cache/stemp ]; then
    clearer
    echoer -e "[+] Creating Temp..."
    touch $DIRECTORY/cache/stemp
    sleeper 0.2
fi
# Features & Main Parts
# ----------------------------------------
# Aliases, Grep, Wget Variables
# ----------------------------------------
alias wget="/sbin/.core/busybox/wget"
alias grep="/sbin/.core/busybox/grep"
SHOST=$DIRECTORY/hosts.gz
TREADME=$DIRECTORY/cache/readme
BREADME=$DIRECTORY/cache/readme-backup
DREADME=$DIRECTORY/cache/deltaReadme
FILTER=$DIRECTORY/cache/filter
BFILTER=$DIRECTORY/cache/filter-backup
DFILTER=$DIRECTORY/cache/deltaFilter
BDFILTER=$DIRECTORY/cache/deltaFilter-backup
WHITELIST=$DIRECTORY/whitelist
BLACKLIST=$DIRECTORY/blacklist
REDIRECTLIST=$DIRECTORY/redirectlist
TEMP=$DIRECTORY/cache/temp
LTEMP=$DIRECTORY/cache/ltemp
PTEMP=$DIRECTORY/cache/ptemp
STEMP=$DIRECTORY/cache/stemp
HBP=$DIRECTORY/hosts-backup.gz
curip=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} ads.nayemador.com' $HOST | sed 's/ads.nayemador.com//')
busybox='/sbin/.core/mirror/bin/busybox' 2>/dev/null
COUNT=1
autopack=
LAST_UPDATED=
CURRENT=
root=
deltapatch=
adblocker=
eonoff=

# Other Variables
# ----------------------------------------
update="\e[1;36m$(busybox date -r $HOST)\e[0m"
bboxname="\e[1;36m$(busybox | head -1 | cut -f 2 -d ' ' | grep -w "osm0sis")\e[0m"
size="\e[1;35m$(ls -lah $HOST | awk '{print $5}')\e[0m"

# Functions
# ------------------------------------
function check_root {
    id="$(id)"
    id="${id#*=}"
    id="${id%%\(*}"
    id="${id%% *}"
    if [ "$id" != "0" ] && [ "$id" != "root" ]; then
        if ! $INTERACTIVE; then
            echo "You must be running as root!" >&2
            exit 1
        fi
        root="\e[1;31m[×]\e[0m"
    else
        root="\e[1;32m[✓]\e[0m"
    fi
    
    return 0
}

function apply_pack {
    if [ $# -gt 0 ]; then
        DIR="$1"
    fi
    echoer ""
    wget --no-check-certificate -O $SHOST https://raw.githubusercontent.com/EnergizedProtection/block/$DIR
    gzip -d -c $SHOST >$HOST
    rm -f $SHOST
    echoer -e $G'[+] Done Applying!'$N
    sleeper 0.5
    echoer -e $W'[+] Make sure to reboot once after applying.'$N
    sleeper 0.5
    echoer -e $Y"$divider"$N
    grep "Version Code" $TREADME >$FILTER
    sleeper 0.5
    CURRENT=$(grep "Version Code" $TREADME)
    LAST_UPDATED=$(sed '1q;d' $FILTER)
    if [ "$LAST_UPDATED" != "$CURRENT" ]; then
        rm -f $DFILTER
        touch $DFILTER
    fi
    echoer -e $W'[+] Returning...'$N
    sleeper 0.5
    clearer
    DIR=""
    COUNT=$((COUNT + 1))
    clearer
    reset
}

function apply_extension {
    local extension_url="$1"
    wget --no-check-certificate -O $SHOST "$extension_url"
    gzip -d -c $SHOST >$PTEMP
    mv $HOST $TEMP
    rm -f $HOST
    cat $TEMP $PTEMP >$HOST
    awk '!a[$0]++' $HOST >$PTEMP && mv -f $PTEMP $HOST
    rm -f $TEMP $PTEMP $SHOST
}

function check_delta {
    wget --no-check-certificate -q -O $DREADME https://raw.githubusercontent.com/AdroitAdorKhan/Energized/master/core/delta-patchset/blacklist
    grep -q "#" $DREADME
    if [ -f $DFILTER ]; then
        DCURRENT=$(grep "#" $DREADME)
        DUPDATED=$(sed '1q;d' $DFILTER)
        if [ "$DUPDATED" != "$DCURRENT" ]; then
            if [ "$(grep "ads.nayemador.com" $HOST)" ]; then
                deltapatch=$G'[dp] DELTA PATCH'$N
            fi
        else
            deltapatch=$W''$N
        fi
    else
        touch $DFILTER
    fi
}

function restore_hosts {
    if [ -s $HBP ]; then
        echoer -e $G'[+] Restoring...'$N
        gzip -d -c $HBP >$HOST
        cp $BFILTER $FILTER
        cp $BDFILTER $DFILTER
        sleeper 0.5
        echoer -e $W'[+] Done!'$N
        sleeper 1.3
    else
        echoer -e $R"[×] NO BACKUP FOUND!"$N
        sleeper 1
    fi
}

function clear_hosts {
    truncate -s 0 $HOST
    rm -f $FILTER
    rm -f $DFILTER
    touch $FILTER
    touch $DFILTER
}

function backup_hosts {
    gzip -9 -c $HOST >$HBP
    cp $FILTER $BFILTER
    cp $DFILTER $BDFILTER
}

function update_hosts {
    clearer
    if [ "$autopack" == "null" ]; then
        if $INTERACTIVE; then
            echoer -e $R"[-] No Energized Pack Applied Yet!"$N
            sleeper 3
        else
            echo "No pack applied" >&2
            exit 2
        fi
    else
        echoer -e $Y"$divider"$N
        sleeper 0.1
        echoer -e $Y"[+] Applying $echeck"$N
        sleeper 0.1
        echoer -e $Y"$divider"$N
        echoer ''
        wget --no-check-certificate -O $SHOST https://raw.githubusercontent.com/EnergizedProtection/block/master/$autopack/formats/hosts.gz
        gzip -d -c $SHOST >$HOST
        rm -f $SHOST
        echoer -e $G"[+] Done Applying!"$N
        sleeper 1
        echoer -e $Y"$divider"$N
        grep "Version Code" $TREADME >$FILTER
        sleeper 0.3
        # Whitelisting
        echoer -e $Y"$divider"$N
        sleeper 0.1
        echoer -e $Y'[+] WHITELISTING'$N
        sleeper 0.1
        echoer -e $Y"$divider"$N
        sleeper 0.1
        # Begins
        if [ ! -f $WHITELIST ]; then
            echoer ""
            echoer -e $R'[-] No Whitelist Detected!'$N
            sleeper 0.5
            echoer -e $W'[+] Copy your whilelist to'$N $Y'/sdcard/EnergizedProtection'$N
            sleeper 2
        else
            if [ -f "$HOST" ]; then
                echoer -e $G'[+] Whitelist Found!'$N
                echoer -e $W'[+] Applying Whitelist'$N
                sleeper 0.3
                grep -Fvxf $WHITELIST $HOST >$TEMP
                rm -f $HOST
                mv -f $TEMP $HOST
                sleeper 0.5
                grep -Fvf $WHITELIST $HOST >$TEMP
                rm -f $HOST
                mv -f $TEMP $HOST
                sleeper 0.5
                grep -vxf $WHITELIST $HOST >$TEMP
                rm -f $HOST
                mv -f $TEMP $HOST
                sleeper 0.1
                echoer -e $G'[+] Done'$N
                echoer -e $W'[+] Make sure to reboot once after applying.'$N
                sleeper 1
            else
                echoer ""
                echoer -e $R'[-] No hosts file detected!'$N
                sleeper 1
                echoer -e $Y'[+] Apply a hosts file first'$N
                sleeper 2
            fi
        fi
        sleeper 0.1
        echoer -e $Y"$divider"$N
        # Blacklisting
        echoer -e $Y"$divider"$N
        sleeper 0.1
        echoer -e $Y'[+] BLACKLISTING'$N
        sleeper 0.1
        echoer -e $Y"$divider"$N
        sleeper 0.1
        # Begins
        if [ ! -f $BLACKLIST ]; then
            echoer ""
            echoer -e $R'[-] No Blacklist detected!'$N
            echoer -e $W'[+] Copy your blacklist to'$N $Y'/sdcard/EnergizedProtection'$N
        else
            if [ -f "$HOST" ]; then
                if [ -s $BLACKLIST ]; then
                    echoer -e $G'[+] Blacklist Found!'$N
                    echoer -e $W'[+] Applying Blacklist...'$N
                    sleeper 0.1
                    echoer -e $W'[+] May take a while, depending on hosts size.'$N
                    sleeper 0.1
                    echoer -e $C'[+] Blacklist Log -'$N
                    sleeper 0.1
                    rm -f $TEMP $STEMP $PTEMP $LTEMP
                    sed 's/^ *//; s/ *$//; /^$/d; /^#/ d' $BLACKLIST >$LTEMP
                    sort -u $LTEMP >$TEMP
                    NEWFILTERS="$(cat $TEMP)"
                    echoer -e "\n# Applied on - $date" >>$HOST
                    printf '%s\n' "$NEWFILTERS" | while IFS= read -r linenew; do
                        if [ ! "$(grep -x "$curip$linenew" $HOST)" ]; then
                            echoer -e "$curip$linenew" >>$HOST
                            echoer -e $Y"$linenew "$N$W"- blacklisted."$N
                        else
                            echoer -e $R"$linenew "$N$W"- already blacklisted."$N
                        fi
                    done
                    rm -f $TEMP $STEMP $PTEMP $LTEMP
                    echoer -e $G'[+] Done'$N
                    echoer -e $W'[+] Make sure to reboot once after applying.'$N
                    sleeper 0.5
                    echoer "[+] Returning..."
                    sleeper 1
                else
                    echoer -e $R'[-] Blacklist file is empty!'$N
                    sleeper 1
                    echoer -e $R'[-] NO NEW FILTER ADDED!'$N
                    echoer -e $W'[+] Returning...'$N
                    sleeper 2
                fi
            else
                echoer ""
                echoer -e $R'[-] No hosts file detected!'$N
                sleeper 1
                echoer -e $Y'[+] Apply a hosts file first'$N
                sleeper 2
            fi
        fi
    fi
}

while true; do
    # TIP 1
    # ----------------------------------------
    clearer
    echoer -e $G"$divider"$N
    echoer -e $G"T I P s"$N
    echoer -e $G"$divider"$N
    echoer ''
    echoer -e $W'~ NOT SURE WHAT YOU ARE DOING?\n- MAKE BACKUP & THEN RESTORE! ;)'$N
    sleeper 0.1
    echoer ''
    echoer -e $W'~ NEED MORE INFO?\n- TYPE TG AND JOIN US! B)'$N
    sleeper 0.1
    echoer ''
    echoer -e $W'~ WANT TO GO TO MAGISK DIRECTLY FROM\nTHE SCRIPT? - TYPE MAGISK & HIT ENTER! :D'$N
    sleeper 1.5
    
    # Check Energized Pack
    # ----------------------------------------
    [ -f /system/etc/hosts ]
    if busybox grep -q "E84S1C-P" $HOST; then
        echeck="\e[1;32mBasic Protection\e[0m"
        autopack="basic"
        elif busybox grep -q "E5P4RK-P" $HOST; then
        echeck="\e[1;32mSpark Protection\e[0m"
        autopack="spark"
        elif busybox grep -q "E8LU-P" $HOST; then
        echeck="\e[1;32mBlu Protection\e[0m"
        autopack="blu"
        elif busybox grep -q "E8LUG0-P" $HOST; then
        echeck="\e[1;32mBlu Go Protection\e[0m"
        autopack="bluGo"
        elif busybox grep -q "EP0R9-P" $HOST; then
        echeck="\e[1;32mPorn Protection\e[0m"
        autopack="porn"
        elif busybox grep -q "EUL71M473-P" $HOST; then
        echeck="\e[1;32mUltimate Protection\e[0m"
        autopack="ultimate"
        elif busybox grep -q "EU91F13D-P" $HOST; then
        echeck="\e[1;32mUnified Protection\e[0m"
        autopack="unified"
    else
        echeck="\e[1;31mNo Pack Detected!\e[0m"
        autopack="null"
    fi
    
    # Check Delta Update
    # ----------------------------------------
    if [ "$autopack" != "null" ]; then
        clearer
        echoer "[+] Checking Delta-Patch"
        sleeper 0.1
        clearer
        echoer "[+] Checking Delta-Patch."
        sleeper 0.15
        clearer
        echoer "[+] Checking Delta-Patch.."
        sleeper 0.18
        clearer
        echoer "[+] Checking Delta-Patch..."
        sleeper 0.2
        
        check_delta
        
        clearer
        echoer "[+] Checking Delta-Patch.."
        sleeper 0.18
        clearer
        echoer "[+] Checking Delta-Patch."
        sleeper 0.15
        clearer
        echoer "[+] Checking Delta-Patch"
        sleeper 0.1
        clearer
    fi
    
    # Check Adblocker
    # ----------------------------------------
    [ -f $HOST ]
    if busybox grep -q ads $HOST; then
        adblocker="\e[1;32m[✓]\e[0m"
    else
        adblocker="\e[1;31m[×]\e[0m"
    fi
    
    # Check Energized
    # ----------------------------------------
    [ -f $HOST ]
    if busybox grep -q ads.nayemador.com $HOST; then
        eonoff="\e[1;32m[✓]\e[0m"
    else
        eonoff="\e[1;31m[×]\e[0m"
    fi
    
    # TIP 2
    # ----------------------------------------
    clearer
    echoer -e $Y"$divider"$N
    echoer -e $Y"T I P s"$N
    echoer -e $Y"$divider"$N
    echoer ''
    echoer -e $W'~ TO DISABLE, JUST TOGGLE THE SYSTEMLESS HOSTS\nIN MAGISK MANAGER.'$N
    sleeper 0.1
    echoer ''
    echoer -e $W'~ GOT ANY ISSUE?\n - SUBMIT ISSUE VIA WEB APP.'$N
    sleeper 0.1
    echoer ''
    echoer -e $W'~ FEELING THANKFUL? ^_^\n - TYPE THX & YOU ARE MOST WELCOME! <3'$N
    sleeper 1.6
    
    # Check Hosts Update
    # ----------------------------------------
    if [ "$autopack" != "null" ]; then
        clearer
        echoer "[+] Checking Update"
        sleeper 0.1
        clearer
        echoer "[+] Checking Update."
        sleeper 0.15
        clearer
        echoer "[+] Checking Update.."
        sleeper 0.18
        clearer
        echoer "[+] Checking Update..."
        sleeper 0.2
        
        wget --no-check-certificate -q -O $TREADME https://raw.githubusercontent.com/EnergizedProtection/block/master/VERSION.md
        grep -q "Version Code" $TREADME
        cp $TREADME $BREADME
        if [ -f $FILTER ]; then
            CURRENT=$(grep "Version Code" $TREADME)
            LAST_UPDATED=$(sed '1q;d' $FILTER)
            if [ "$LAST_UPDATED" != "$CURRENT" ]; then
                if [ "$(grep "ads.nayemador.com" $HOST)" ]; then
                    eupdate=$G'[ϟ] UPDATE AVAILABLE!'$N
                fi
            else
                eupdate=$C'[×] NO NEW UPDATE!'$N
            fi
        else
            touch $FILTER
            eupdate="[+] APPLY PACK FIRST!"
        fi
        clearer
        echoer "[+] Checking Update.."
        sleeper 0.18
        clearer
        echoer "[+] Checking Update."
        sleeper 0.15
        clearer
        echoer "[+] Checking Update"
        sleeper 0.1
        clearer
    else
        eupdate="[+] APPLY PACK FIRST!"
    fi
    
    # Input
    # ----------------------------------------
    if $INTERACTIVE; then
        INPUT=$(eval "echoer \$$COUNT")
        if [ ! "$INPUT" ]; then
            if [ "$1" ]; then
                rm -f $TREADME
                exit 0
            fi
            # Starts Screen Echos
            # ----------------------------------------
            echoer ''
            echoer -e $Y"      _____  _________  _____________  _______  "$N
            sleeper 0.1
            echoer -e $Y"     / __/ |/ / __/ _ \/ ___/  _/_  / / __/ _ \ "$N
            sleeper 0.1
            echoer -e $Y"    / _//    / _// , _/ (_ // /  / /_/ _// // / "$N
            sleeper 0.1
            echoer -e $Y"   /___/_/|_/___/_/|_|\___/___/ /___/___/____/  "$N
            sleeper 0.1
            echoer ''
            sleeper 0.1
            echoer -e $Y'      P   R   O   T   E   C   T   I   O   N'$N
            echoer "                                         v.$version"
            sleeper 0.1
            echoer -e $Y"$divider"$N
            sleeper 0.1
            echoer -e $Y'ϟ B A S I C  I N F O -'$N
            sleeper 0.1
            echoer -e $Y"$divider"$N
            sleeper 0.1
            echoer -e $root$W" ROOT             "$N$W"[+] BUSYBOX: $bboxname"$N
            sleeper 0.1
            echoer -e $eonoff$W" ENERGIZED        "$N$W"[+] PACK: $echeck"$N
            sleeper 0.1
            echoer -e $adblocker$W" ADBLOCKING       "$N$W"[+] SIZE: $size"$N
            sleeper 0.1
            echoer -e $W"[+] LAST UPDATED: $update"$N
            sleeper 0.1
            echoer -e $Y"$divider"$N
            sleeper 0.1
            # Packs
            # ----------------------------------------
            echoer -e $Y"ϟ P A C K s -             $eupdate"$N
            sleeper 0.1
            echoer -e $Y"$divider"$N
            sleeper 0.1
            echoer -e $W"[1] Spark         [3] Blu          [5] Ultimate"$N
            sleeper 0.1
            echoer -e $W"[2] Blu Go        [4] Basic        [6] Unified"$N
            sleeper 0.1
            echoer -e $Y"$divider"$N
            sleeper 0.1
            echoer -e $Y"ϟ E X T E N S I O N s -   "$N$deltapatch
            sleeper 0.1
            echoer -e $Y"$divider"$N
            sleeper 0.1
            echoer -e $W"[p] Porn          [rl] Regional    [x] Xtreme"$N
            sleeper 0.1
            echoer -e $W"[pl] Porn Lite    [s] Social"$N
            sleeper 0.1
            # Options
            # ----------------------------------------
            echoer -e $Y"$divider"$N
            sleeper 0.1
            echoer -e $Y'ϟ O P T I O N s -'$N
            sleeper 0.1
            echoer -e $Y"$divider"$N
            sleeper 0.1
            echoer -e $W'[c] Clear Hosts           [ip] Redirection IP'$N
            sleeper 0.1
            echoer -e $W'[w] Apply Whitelist       [iw] Instant Whitelist'$N
            sleeper 0.1
            echoer -e $W'[b] Apply Blacklist       [ib] Instant Blacklist'$N
            sleeper 0.1
            echoer -e $W'[r] Redirect Domains      [ir] Instant Redirect'$N
            sleeper 0.1
            # Misc
            # ----------------------------------------
            echoer -e $Y"$divider"$N
            sleeper 0.1
            echoer -e $Y'ϟ M I S C -'$N
            sleeper 0.1
            echoer -e $Y"$divider"$N
            sleeper 0.1
            echoer -e $W'[bp] Backup Hosts         [rs] Restore Hosts'$N
            sleeper 0.1
            echoer -e $W'[i] Web & Info            [in] Instructions'$N
            sleeper 0.1
            echoer -e $W'[u] Current-O-Update      [ck] Check Domain'$N
            sleeper 0.1
            echoer -e $G'[si] Submit Issue         '$N$R'[q] Quit.'$N
            # Read Input
            # ----------------------------------------
            if $INTERACTIVE; then
                prompt=$(echo -e $Y'[+] Your Input'$N" - ")
                read -p "$prompt" -r INPUT
            fi
            if [ "$INPUT" != "m" ]; then
                INPUT="$(echo "$INPUT" | sed 's/m//g')"
                clearer
            fi
            DIR=""
        fi
        case "$INPUT" in
            # Spark Protection
            1 | spark | Spark | SPARK)
                DIR="master/spark/formats/hosts.gz"
                clearer
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $Y'[+] Applying Energized Spark Protection'$N
            ;;
            # Blu Go Protection
            2 | blugo | BluGo | bluGo | BLUGO)
                DIR="master/bluGo/formats/hosts.gz"
                clearer
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $Y'[+] Applying Energized Blu Go Protection'$N
                echoer -e $Y"$divider"$N
            ;;
            # Blu Protection
            3 | blu | Blu | BLU)
                DIR="master/blu/formats/hosts.gz"
                clearer
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $Y'[+] Applying Energized Blu Protection'$N
                echoer -e $Y"$divider"$N
            ;;
            # Basic Protection
            4 | basic | Basic | BASIC)
                clearer
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $Y"Hold on a sec!"$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $W"Energized Basic is more than 12MB in size, and"$N
                sleeper 0.1
                echoer -e $W"may slow down your browsing experience (If your"$N
                sleeper 0.1
                echoer -e $W"device can't handle the load.)"$N
                echoer ''
                sleeper 0.1
                prompt=$(echo -n -e $W'[+] PROCEED?'$N $Y'[Y/N]'$N: $G"$answer"$N)
                read -p "$prompt" answer
                if [ "$answer" == "Y" ]; then
                    echoer "[+] Applying Energized Basic..."
                    DIR="master/basic/formats/hosts.gz"
                    clearer
                    echoer -e $Y"$divider"$N
                    sleeper 0.1
                    echoer -e $Y'[+] Applying Energized Basic Protection'$N
                    echoer -e $Y"$divider"$N
                    sleeper 0.3
                else
                    clearer
                    echoer -n -e $W'[+] RETURNING '$N
                    echoer -n -e $Y'•'$N
                    sleeper 0.2
                    echoer -n -e $Y'•'$N
                    sleeper 0.3
                    echoer -n -e $Y'•'$N
                    sleeper 0.2
                    sleeper 0.1
                fi
            ;;
            # Ultimate Protection
            5 | ultimate | Ultimate | ULTIMATE)
                clearer
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $Y"Hold on a sec!"$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $W"Energized Ultimate is more than 17MB in size, and"$N
                sleeper 0.1
                echoer -e $W"may slow down your browsing experience (If your"$N
                sleeper 0.1
                echoer -e $W"device can't handle the load.)"$N
                echoer ''
                sleeper 0.1
                prompt=$(echo -n -e $W'[+] PROCEED?'$N $Y'[Y/N]'$N: $G"$answer"$N)
                read -p "$prompt" answer
                if [ "$answer" == "Y" ]; then
                    echoer "[+] Applying Energized Ultimate..."
                    DIR="master/ultimate/formats/hosts.gz"
                    clearer
                    echoer -e $Y"$divider"$N
                    sleeper 0.1
                    echoer -e $Y'[+] Applying Energized Ultimate Protection'$N
                    echoer -e $Y"$divider"$N
                    sleeper 0.3
                else
                    clearer
                    echoer -n -e $W'[+] RETURNING '$N
                    echoer -n -e $Y'•'$N
                    sleeper 0.2
                    echoer -n -e $Y'•'$N
                    sleeper 0.3
                    echoer -n -e $Y'•'$N
                    sleeper 0.2
                    sleeper 0.1
                fi
            ;;
            # Unified Protection
            6 | unified | Unified | UNIFIED)
                clearer
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $Y"Hold on a sec!"$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $W"Energized Unified is more than 30MB in size, and"$N
                sleeper 0.1
                echoer -e $W"may slow down your browsing experience (If your"$N
                sleeper 0.1
                echoer -e $W"device can't handle the load.)"$N
                echoer ''
                sleeper 0.1
                answer=Y
                if $INTERACTIVE; then
                    prompt=$(echo -n -e $W'[+] PROCEED?'$N $Y'[Y/N]'$N: $G"$answer"$N)
                    read -p "$prompt" answer
                fi
                if [ "$answer" == "Y" ]; then
                    echoer "[+] Applying Energized Unified..."
                    DIR="master/unified/formats/hosts.gz"
                    clearer
                    echoer -e $Y"$divider"$N
                    sleeper 0.1
                    echoer -e $Y'[+] Applying Energized Unified Protection'$N
                    echoer -e $Y"$divider"$N
                    sleeper 0.3
                else
                    clearer
                    echoer -n -e $W'[+] RETURNING '$N
                    echoer -n -e $Y'•'$N
                    sleeper 0.2
                    echoer -n -e $Y'•'$N
                    sleeper 0.3
                    echoer -n -e $Y'•'$N
                    sleeper 0.2
                    sleeper 0.1
                fi
            ;;
            # Porn Extension
            # ----------------------------------------
            p | porn | Porn | PORN)
                clearer
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $Y"Hold on a sec!"$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $W"Energized Porn is more than 15MB in size, and"$N
                sleeper 0.1
                echoer -e $W"may slow down your browsing experience (If your"$N
                sleeper 0.1
                echoer -e $W"device can't handle the load.)"$N
                echoer ''
                sleeper 0.1
                answer=Y
                if $INTERACTIVE; then
                    prompt=$(echo -n -e $W'[+] PROCEED?'$N $Y'[Y/N]'$N: $G"$answer"$N)
                    read -p "$prompt" answer
                fi
                if [ "$answer" == "Y" ]; then
                    clearer
                    echoer -e $Y"$divider"$N
                    echoer -e $Y'[+] PORN HOSTS EXTENSION'$N
                    sleeper 0.1
                    echoer -e $Y"$divider"$N
                    sleeper 0.1
                    echoer "Adds Porn Blocking Pack to current hosts."
                    echoer -e $Y"$divider"$N
                    echoer ""
                    echoer "[+] Applying Porn Hosts to current hosts."
                    apply_extension "https://raw.githubusercontent.com/EnergizedProtection/block/master/porn/formats/hosts.gz"
                    echoer -e $G'[+] Done!'$N
                    echoer "[+] Returning..."
                else
                    clearer
                    echoer -n -e $W'[+] RETURNING '$N
                    echoer -n -e $Y'•'$N
                    sleeper 0.2
                    echoer -n -e $Y'•'$N
                    sleeper 0.3
                    echoer -n -e $Y'•'$N
                    sleeper 0.2
                    sleeper 0.1
                fi
            ;;
            # Porn Lite Extension
            # ----------------------------------------
            pl)
                clearer
                echoer -e $Y"$divider"$N
                echoer -e $Y'[+] PORN LITE HOSTS EXTENSION'$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer "Adds Porn Lite Blocking Pack to current hosts."
                echoer -e $Y"$divider"$N
                echoer ""
                echoer "[+] Applying Porn Lite Hosts to current hosts."
                apply_extension "https://raw.githubusercontent.com/EnergizedProtection/block/master/extensions/porn-lite/formats/hosts.gz"
                echoer -e $G'[+] Done!'$N
                echoer "[+] Returning..."
            ;;
            # Regional Extension
            # ----------------------------------------
            rl | rg | regional | Regional | REGIONAL | REG | reg)
                clearer
                echoer -e $Y"$divider"$N
                echoer -e $Y'[+] REGIONAL HOSTS EXTENSION'$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer "Adds Regional Blocking Pack to current hosts."
                echoer -e $Y"$divider"$N
                echoer ""
                echoer "[+] Applying Regional Hosts to current hosts."
                apply_extension "https://raw.githubusercontent.com/EnergizedProtection/block/master/extensions/regional/formats/hosts.gz"
                echoer -e $G'[+] Done!'$N
                echoer "[+] Returning..."
            ;;
            # Social Extension
            # ----------------------------------------
            s | social | Social | SOCIAL)
                clearer
                echoer -e $Y"$divider"$N
                echoer -e $Y'[+] SOCIAL HOSTS EXTENSION'$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer "Adds Social Blocking Pack to current hosts."
                echoer -e $Y"$divider"$N
                echoer ""
                echoer "[+] Applying Social Hosts to current hosts."
                apply_extension "https://raw.githubusercontent.com/EnergizedProtection/block/master/extensions/social/formats/hosts.gz"
                echoer -e $G'[+] Done!'$N
                echoer "[+] Returning..."
            ;;
            # Xtreme Extension
            # ----------------------------------------
            x | X | xtreme | XTRM | xtrm | Xtrm | Xtreme)
                clearer
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $Y"Hold on a sec!"$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $W"Energized Xtreme Extension strictly blocks every"$N
                sleeper 0.1
                echoer -e $W"annoyance out there. Which may break app(s) and"$N
                sleeper 0.1
                echoer -e $W"website(s)."$N
                echoer ''
                sleeper 0.1
                prompt=$(echo -n -e $W'[+] PROCEED?'$N $Y'[Y/N]'$N: $G"$answer"$N)
                read -p "$prompt" answer
                if [ "$answer" == "Y" ]; then
                    clearer
                    echoer -e $Y"$divider"$N
                    echoer -e $Y'[+] XTREME HOSTS EXTENSION'$N
                    sleeper 0.1
                    echoer -e $Y"$divider"$N
                    sleeper 0.1
                    echoer "Adds Xtreme Blocking Pack to current hosts."
                    echoer -e $Y"$divider"$N
                    echoer ""
                    echoer "[+] Applying Xtreme Hosts to current hosts."
                    apply_extension "https://raw.githubusercontent.com/EnergizedProtection/block/master/extensions/xtreme/formats/hosts.gz"
                    echoer -e $G'[+] Done!'$N
                    echoer "[+] Returning..."
                else
                    clearer
                    echoer -n -e $W'[+] RETURNING '$N
                    echoer -n -e $Y'•'$N
                    sleeper 0.2
                    echoer -n -e $Y'•'$N
                    sleeper 0.3
                    echoer -n -e $Y'•'$N
                    sleeper 0.2
                    sleeper 0.1
                fi
            ;;
            # Current-O-Update
            # ----------------------------------------
            u)
                update_hosts
            ;;
            # Whitelist
            # ----------------------------------------
            w)
                clearer
                echoer -e $Y"$divider"$N
                echoer -e $Y'ϟ W H I T E L I S T I N G'$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer ""
                # Begins
                if [ ! -f $WHITELIST ]; then
                    echoer ""
                    echoer -e $R'[-] No Whitelist Detected!'$N
                    sleeper 0.5
                    echoer -e $W'[+] Copy your whilelist to'$N $Y'$DIRECTORY'$N
                    sleeper 2
                else
                    if [ -f "$HOST" ]; then
                        echoer -e $G'[+] Whitelist Found!'$N
                        echoer -e $W'[+] Applying Whitelist'$N
                        echoer -e $W'[+] May take a while, depending on hosts size.'$N
                        NEWFILTERS="$(cat $WHITELIST)"
                        printf '%s\n' "$NEWFILTERS" | while IFS= read -r linenew; do
                            if [ ! "$(grep -x "$curip$linenew" $HOST)" ]; then
                                echoer -e $G"$linenew "$N$W"- already whitelisted."$N
                            else
                                echoer -e $Y"$linenew "$N$W"- whitelisted."$N
                            fi
                        done
                        sleeper 0.3
                        grep -Fvxf $WHITELIST $HOST >$TEMP
                        rm -f $HOST
                        mv -f $TEMP $HOST
                        sleeper 0.5
                        grep -Fvf $WHITELIST $HOST >$TEMP
                        rm -f $HOST
                        mv -f $TEMP $HOST
                        sleeper 0.5
                        grep -vxf $WHITELIST $HOST >$TEMP
                        rm -f $HOST
                        mv -f $TEMP $HOST
                        sleeper 1
                        echoer -e $G'[+] Done'$N
                        echoer -e $W'[+] Make sure to reboot once after applying.'$N
                        sleeper 0.5
                        echoer "[+] Returning..."
                        sleeper 1.5
                    else
                        echoer ""
                        echoer -e $R'[-] No hosts file detected!'$N
                        sleeper 1
                        echoer -e $Y'[+] Apply a hosts file first'$N
                        sleeper 2
                    fi
                fi
            ;;
            # Instant Whitelist
            # ----------------------------------------
            iw) while true; do
                    clearer
                    echoer -e $Y"$divider"$N
                    echoer -e $Y'ϟ I N S T A N T  W H I T E L I S T'$N
                    sleeper 0.1
                    echoer -e $Y"$divider"$N
                    sleeper 0.1
                    echoer -e "Instant whitelist will let you add a domain at a\ntime to add to your hosts as whitelisted.\nNote. To Whitelist more domains, use 'w' method."
                    echoer -e $Y"$divider"$N
                    echoer ""
                    prompt=$(echo -n -e $W'[+] Enter Domain Name Only:'$N $iw)
                    read -p "$prompt" iw
                    echoer -e $W'[+] Your Domain'$N $Y"$iw"$N
                    prompt=$(echo -n -e $W'[+] Are you sure?'$N $Y'[Y/N]'$N: $G"$answer"$N)
                    read -p "$prompt" answer
                    if [ "$answer" == "Y" ]; then
                        echoer "[+] Applying $iw as whitelist..."
                        grep -Fvx "$curip$iw" $HOST >$TEMP
                        rm -f $HOST
                        mv -f $TEMP $HOST
                        echoer "$iw" >>$WHITELIST
                        echoer -e $W'[+] Done'$N
                        echoer -e $W'[+] Make sure to reboot once after applying.'$N
                        sleeper 0.5
                        echoer -e $W'[+] Returning...'$N
                        sleeper 1
                        prompt=$(echo -n -e $W'[+] Whitelist Another Domain?'$N $Y'[y/n]'$N: $G"$answer"$N)
                        read -p "$prompt" answer
                        if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                            break
                        fi
                    else
                        clearer
                        prompt=$(echo -n -e $W'[+] Whitelist Another Domain?'$N $Y'[y/n]'$N: $G"$answer"$N)
                        read -p "$prompt" answer
                        if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                            break
                        fi
                        echoer -n -e $W'[+] RETURNING '$N
                        echoer -n -e $Y'•'$N
                        sleeper 0.2
                        echoer -n -e $Y'•'$N
                        sleeper 0.3
                        echoer -n -e $Y'•'$N
                        sleeper 0.2
                        sleeper 0.3
                    fi
                done
            ;;
            # Blacklist
            # ----------------------------------------
            b)
                clearer
                echoer -e $Y"$divider"$N
                echoer -e $Y'ϟ B L A C K L I S T I N G'$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer ""
                # Begins
                if [ ! -f $BLACKLIST ]; then
                    echoer ""
                    echoer -e $R'[-] No Blacklist detected!'$N
                    echoer -e $W'[+] Copy your blacklist to'$N $Y'$DIRECTORY'$N
                else
                    if [ -f "$HOST" ]; then
                        if [ -s $BLACKLIST ]; then
                            echoer -e $G'[+] Blacklist Found!'$N
                            echoer -e $W'[+] Applying Blacklist...'$N
                            sleeper 0.1
                            echoer -e $W'[+] May take a while, depending on hosts size.'$N
                            sleeper 0.1
                            echoer -e $C'[+] Blacklist Log -'$N
                            sleeper 0.1
                            rm -f $TEMP $STEMP $PTEMP $LTEMP
                            sed 's/^ *//; s/ *$//; /^$/d; /^#/ d' $BLACKLIST >$LTEMP
                            sort -u $LTEMP >$TEMP
                            NEWFILTERS="$(cat $TEMP)"
                            echoer -e "\n# Applied on - $date" >>$HOST
                            printf '%s\n' "$NEWFILTERS" | while IFS= read -r linenew; do
                                if [ ! "$(grep -x "$curip$linenew" $HOST)" ]; then
                                    echoer -e "$curip$linenew" >>$HOST
                                    echoer -e $Y"$linenew "$N$W"- blacklisted."$N
                                else
                                    echoer -e $R"$linenew "$N$W"- already blacklisted."$N
                                fi
                            done
                            rm -f $TEMP $STEMP $PTEMP $LTEMP
                            echoer -e $G'[+] Done'$N
                            echoer -e $W'[+] Make sure to reboot once after applying.'$N
                            sleeper 0.5
                            echoer "[+] Returning..."
                            sleeper 1
                        else
                            echoer -e $R'[-] Blacklist file is empty!'$N
                            sleeper 1
                            echoer -e $R'[-] NO NEW FILTER ADDED!'$N
                            echoer "[+] Returning..."
                            sleeper 2
                        fi
                    else
                        echoer ""
                        echoer -e $R'[-] No hosts file detected!'$N
                        sleeper 1
                        echoer -e $Y'[+] Apply a hosts file first'$N
                        sleeper 2
                    fi
                fi
            ;;
            # Instant Blacklist
            # ----------------------------------------
            ib) while true; do
                    clearer
                    echoer -e $Y"$divider"$N
                    echoer -e $Y'ϟ I N S T A N T  B L A C K L I S T'$N
                    sleeper 0.1
                    echoer -e $Y"$divider"$N
                    sleeper 0.1
                    echoer -e "Instant Blacklist will let you add a domain at a\ntime to add to your hosts as blacklisted.\nNote. To Blacklist more domains, use 'b' method."
                    echoer -e $Y"$divider"$N
                    echoer ""
                    prompt=$(echo -n -e $W'[+] Enter Domain Name Only:'$N $ib)
                    read -p "$prompt" ib
                    if [ ! "$(grep -x "$curip$ib" $HOST)" ]; then
                        echoer -e $W'[+] Your Domain(s)'$N $Y"$ib"$N
                        prompt=$(echo -n -e $W'[+] Are you sure?'$N $Y'[Y/N]'$N: $G"$answer"$N)
                        read -p "$prompt" answer
                        if [ "$answer" == "Y" ]; then
                            echoer "[+] Applying $ib as blacklist..."
                            echoer -e "\n# Instant Blacklist Applied on - $date" >>$HOST
                            echoer -e "$curip$ib" >>$HOST
                            echoer -e $Y"$ib "$N$W"- blacklisted."$N
                            sleeper 0.6
                            echoer -e "\n# Applied on - $date" >>$BLACKLIST
                            echoer "$ib" >>$BLACKLIST
                            echoer -e $W'[+] Done'$N
                            echoer -e $W'[+] Make sure to reboot once after applying.'$N
                            sleeper 0.5
                            echoer -e $W'[+] Returning...'$N
                            sleeper 0.4
                            prompt=$(echo -n -e $W'[+] Blacklist Another Domain?'$N $Y'[y/n]'$N: $G"$answer"$N)
                            read -p "$prompt" answer
                            if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                                break
                            fi
                            clearer
                        else
                            clearer
                            prompt=$(echo -n -e $W'[+] Blacklist Another Domain?'$N $Y'[y/n]'$N: $G"$answer"$N)
                            read -p "$prompt" answer
                            if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                                break
                            fi
                            echoer -n -e $W'[+] RETURNING '$N
                            echoer -n -e $Y'•'$N
                            sleeper 0.2
                            echoer -n -e $Y'•'$N
                            sleeper 0.3
                            echoer -n -e $Y'•'$N
                            sleeper 0.2
                            sleeper 0.3
                        fi
                    else
                        echoer -e $G'[+] Domain was already being added to the hosts!'$N
                        sleeper 1
                        prompt=$(echo -n -e $W'[+] Blacklist Another Domain?'$N $Y'[y/n]'$N: $G"$answer"$N)
                        read -p "$prompt" answer
                        if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                            break
                        fi
                    fi
                done
            ;;
            # Redirect
            # ----------------------------------------
            r)
                clearer
                echoer -e $Y"$divider"$N
                echoer -e $Y'ϟ R E D I R E C T'$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer ""
                sleeper 0.1
                echoer "Redirects the domains in the list to an IP."
                # Begins
                if [ ! -f $REDIRECTLIST ]; then
                    echoer ""
                    echoer -e $R'[-] No Redirectlist detected!'$N
                    echoer -e $W'[+] Copy your redirect list to'$N $Y'$DIRECTORY'$N
                else
                    if [ -f "$HOST" ]; then
                        if [ -s $REDIRECTLIST ]; then
                            echoer -e $G'[+] Redirectlist Found!'$N
                            echoer ''
                            prompt=$(echo -n -e $W'[+] Enter IP (v4 or v6):'$N $ip)
                            read -p "$prompt" ip
                            echoer -e $W'[+] Your IP:'$N $Y"$ip"$N
                            prompt=$(echo -n -e $W'[+] Are you sure?'$N $Y'[Y/N]'$N: $G"$answer"$N)
                            read -p "$prompt" answer
                            if [ "$answer" == "Y" ]; then
                                echoer -e $W'[+] Redirecting...'$N
                                sleeper 0.1
                                echoer -e $W'[+] May take a while, depending on hosts size.'$N
                                sleeper 0.1
                                echoer -e $C"[+] Redirect Log -"$N
                                rm -f $STEMP
                                cp $REDIRECTLIST $STEMP
                                echoer -e "\n# Applied on - $date" >>$HOST
                                sed 's/^ *//; s/ *$//; /^$/d; /^#/d' $STEMP >$TEMP
                                rm -f $STEMP
                                NEWFILTERS="$(cat $TEMP)"
                                printf '%s\n' "$NEWFILTERS" | while IFS= read -r linenew; do
                                    grep -Fvx "$curip$linenew" $HOST >$STEMP
                                    rm -f $HOST
                                    mv -f $TEMP $HOST
                                    if [ ! "$(grep -Fx "$curip$linenew" $HOST)" ]; then
                                        echoer -e "$ip $linenew" >>$HOST
                                        echoer -e $Y"$linenew "$N$W"- redirected to "$N$G"$ip"$N
                                    fi
                                done
                                echoer -e $G'[+] Done'$N
                                echoer -e $W'[+] Make sure to reboot once after applying.'$N
                                sleeper 0.5
                                echoer -e $W'[+] Returning...'$N
                                sleeper 1
                            else
                                echoer -e $W'[+] Returning...'$N
                            fi
                        else
                            echoer -e $R'[-] Blacklist file is empty!'$N
                            sleeper 1
                            echoer -e $R'[-] NO NEW FILTER ADDED!'$N
                            echoer -e $W'[+] Returning...'$N
                            sleeper 2
                        fi
                    else
                        echoer ""
                        echoer -e $R'[-] No hosts file detected!'$N
                        sleeper 1
                        echoer -e $Y'[+] Apply a hosts file first'$N
                        sleeper 2
                    fi
                fi
            ;;
            # Instant Redirect
            # ----------------------------------------
            ir) while true; do
                    clearer
                    echoer -e $Y"$divider"$N
                    echoer -e $Y'ϟ I N S T A N T  R E D I R E C T'$N
                    sleeper 0.1
                    echoer -e $Y"$divider"$N
                    sleeper 0.1
                    echoer -e "Instant redirect helps to redirect any specific\n domain to any IP."
                    echoer -e $Y"$divider"$N
                    echoer ""
                    prompt=$(echo -n -e $W'[+] Enter Domain Name Only:'$N $iw)
                    read -p "$prompt" iw
                    echoer -e $W'[+] Your Domain'$N $Y"$iw"$N
                    prompt=$(echo -n -e $W'[+] Are you sure?'$N $Y'[Y/N]'$N: $G"$answer"$N)
                    read -p "$prompt" answer
                    if [ "$answer" == "Y" ]; then
                        grep -Fvx "$curip$iw" $HOST >$TEMP
                        rm -f $HOST
                        mv -f $TEMP $HOST
                        prompt=$(echo -n -e $W'[+] Enter IP (v4 or v6):'$N $ip)
                        read -p "$prompt" ip
                        echoer -e $W'[+] Your IP'$N $Y"$ip"$N
                        prompt=$(echo -n -e $W'[+] Are you sure?'$N $Y'[Y/N]'$N: $G"$answer"$N)
                        read -p "$prompt" answer
                        if [ "$answer" == "Y" ]; then
                            echoer -e "\n$ip $iw" >>$HOST
                            echoer -e "\n# Applied on - $date" >>$REDIRECTLIST
                            echoer "$ip $iw" >>$REDIRECTLIST
                        else
                            echoer -e "\n$curip $iw" >>$HOST
                        fi
                        echoer -e $W'[+] Done'$N
                        echoer -e $W'[+] Make sure to reboot once after applying.'$N
                        sleeper 0.5
                        echoer -e $W'[+] Returning...'$N
                        sleeper 1
                        prompt=$(echo -n -e $W'[+] Redirect Another Domain?'$N $Y'[y/n]'$N: $G"$answer"$N)
                        read -p "$prompt" answer
                        if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                            break
                        fi
                    else
                        clearer
                        prompt=$(echoer -n -e $W'[+] Redirect Another Domain?'$N $Y'[y/n]'$N: $G"$answer"$N)
                        read -p "$prompt" answer
                        if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                            break
                        fi
                        echoer -n -e $W'[+] RETURNING '$N
                        echoer -n -e $Y'•'$N
                        sleeper 0.2
                        echoer -n -e $Y'•'$N
                        sleeper 0.3
                        echoer -n -e $Y'•'$N
                        sleeper 0.2
                        sleeper 0.3
                    fi
                done
            ;;
            # Systemless Hosts
            # ----------------------------------------
            magisk | Magisk | MAGISK)
                am start -n com.topjohnwu.magisk/com.topjohnwu.magisk.MainActivity
            ;;
            # Info
            # ----------------------------------------
            i | info | Info | INFO)
                am start -a android.intent.action.VIEW -d "https://energized.pro"
            ;;
            # Instructions
            # ----------------------------------------
            in | instructions | instruction | IN | INSTRUCTION | INSTRUCTIONS)
                am start -a android.intent.action.VIEW -d "http://link.nayemador.com/epmagiskusage"
            ;;
            # Submit Issue
            # ----------------------------------------
            si | SI | webapp | WEBAPP | WebApp | app | submit | Submit | issue | Submit | is | SUBMIT | ISSUE | IS)
                clearer
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e $Y'ϟ B O X  W E B  A P P'$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer "Got any whitelist/blacklist issue? or anything\nelse? No worry! Just Submit via Web App."
                echoer -e $Y"$divider"$N
                echoer ""
                echoer -e $B'You will be redirected in 3 seconds...'$N
                sleeper 3
                am start -a android.intent.action.VIEW -d "https://app.energized.pro"
            ;;
            thanks | thx | thnx | thax | thank | thanku | thankyou | THX | Thanks)
                am start -a android.intent.action.VIEW -d "$saythanks"
            ;;
            # Telegram
            # ----------------------------------------
            tg | telegram | Telegram | TELEGRAM)
                am start -a android.intent.action.VIEW -d "http://go.energized.pro/telegram"
            ;;
            # Backup Hosts
            # ----------------------------------------
            bp)
                clearer
                echoer -e $Y"$divider"$N
                echoer -e $Y'ϟ B A C K U P'$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer "Makes a backup of your current hosts."
                echoer -e $Y"$divider"$N
                echoer ""
                echoer -e $G'[+] Backup In Process...'$N
                backup_hosts
                sleeper 0.5
                echoer -e $W'[+] Done!'$N
                sleeper 0.5
            ;;
            # Restore Hosts
            # ----------------------------------------
            rs | restore | Restore | RESTORE)
                clearer
                echoer -e $Y"$divider"$N
                echoer -e $Y'ϟ R E S T O R E'$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer "Restores the hosts backup."
                echoer -e $Y"$divider"$N
                echoer ""
                
                restore_hosts
            ;;
            # Clear Hosts
            # ----------------------------------------
            c | clearer | Clear | CLEAR)
                clearer
                echoer -e $Y"$divider"$N
                echoer -e $Y'ϟ C L E A N  H O S T S'$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer "Clean your current hosts to defualt."
                echoer -e $Y"$divider"$N
                echoer ""
                
                clear_hosts
                
                echoer "[+] Clearing Hosts File..."
                sleeper 0.3
                echoer -e "# Energized Protection - https://energized.pro\n# Let's make an annoyance free better open internet, altogether!\127.0.0.1 localhost" >>$HOST
                echoer "[+] Done Clearing Hosts!"
                echoer "[+] Returning..."
                sleeper 2
            ;;
            # Delta Patch
            # ----------------------------------------
            dp | deltapatch)
                clearer
                DCURRENT=$(grep "#" $DREADME)
                DUPDATED=$(sed '1q;d' $DFILTER)
                if [ "$DUPDATED" != "$DCURRENT" ]; then
                    echoer -e $Y"$divider"$N
                    echoer -e $Y'ϟ D E L T A  P A T C H S E T'$N
                    sleeper 0.1
                    echoer -e $Y"$divider"$N
                    sleeper 0.1
                    echoer "Apply Delta Blacklist and Whitelist."
                    echoer -e $Y"$divider"$N
                    echoer ""
                    # Blacklist
                    echoer -e $W'[+] Downloading Blacklist Patch'$N
                    wget --no-check-certificate -O $LTEMP https://raw.githubusercontent.com/AdroitAdorKhan/Energized/master/core/delta-patchset/blacklist
                    grep "#" $LTEMP >$DFILTER
                    sed -i '/^#/d' $LTEMP
                    echoer -e $W'[+] Applying Delta Blacklist to current hosts.'$N
                    sleeper 0.1
                    echoer -e $W'[+] It may take a while, depending on hosts size.'$N
                    sleeper 0.1
                    echoer -e $C'[+] Blacklist Log -'$N
                    sleeper 0.1
                    rm -f $TEMP $STEMP $PTEMP
                    sed 's/^ *//; s/ *$//; /^$/d; /^#/ d' $LTEMP >$TEMP
                    sort -u $TEMP >$LTEMP
                    NEWFILTERS="$(cat $LTEMP)"
                    echoer -e "\n# Delta Patch - $date" >>$HOST
                    printf '%s\n' "$NEWFILTERS" | while IFS= read -r linenew; do
                        if [ ! "$(grep -x "$curip$linenew" $HOST)" ]; then
                            echoer -e "$curip$linenew" >>$HOST
                            echoer -e $Y"$linenew "$N$W"- blacklisted."$N
                        else
                            echoer -e $R"$linenew "$N$W"- already blacklisted."$N
                        fi
                    done
                    rm -f $TEMP $STEMP $PTEMP $LTEMP
                    echoer -e $G'[+] Done'$N
                    echoer ''
                    sleeper 0.5
                    # Whitelist
                    echoer -e $W'[+] Downloading Whitelist Patch'$N
                    wget --no-check-certificate -O $STEMP https://raw.githubusercontent.com/AdroitAdorKhan/Energized/master/core/delta-patchset/whitelist
                    echoer -e $W'[+] Applying Delta Whitelist to current hosts.'$N
                    sleeper 0.1
                    echoer -e $W'[+] It may take a while, depending on hosts size.'$N
                    sleeper 0.1
                    NEWFILTERS="$(cat $STEMP)"
                    printf '%s\n' "$NEWFILTERS" | while IFS= read -r linenew; do
                        if [ ! "$(grep -x "$curip$linenew" $HOST)" ]; then
                            echoer -e $G"$linenew "$N$W"- already whitelisted."$N
                        else
                            echoer -e $Y"$linenew "$N$W"- whitelisted."$N
                        fi
                    done
                    grep -Fvf $STEMP $HOST >$TEMP
                    rm -f $HOST
                    mv -f $TEMP $HOST
                    rm -f $TEMP $STEMP
                    echoer -e $G'[+] Done!'$N
                    echoer -e $W'[+] Make sure to reboot once after applying.'$N
                    sleeper 0.5
                    echoer "[+] Returning..."
                    sleeper 2
                else
                    echoer -e $Y"[+] No New Patch is Available!"$N
                    sleeper 2
                fi
            ;;
            # Redirection IP
            # ----------------------------------------
            ip)
                clearer
                echoer -e $Y"$divider"$N
                echoer -e $Y'ϟ R E D I R E C T I O N  I P'$N
                sleeper 0.1
                echoer -e $Y"$divider"$N
                sleeper 0.1
                echoer -e "Add your custom Redirection IP. It must be an IP.\nUsing anything else than IP, may cause issue with\nyour hosts."
                echoer -e $Y"$divider"$N
                echoer ""
                prompt=$(echo -n -e $W'[+] Enter Redirection IP:'$N $ip)
                read -p "$prompt" ip
                echoer -e $W'[+] Your Redirection IP'$N $Y"$ip"$N
                prompt=$(echo -n -e $W'[+] Are you sure?'$N $Y'[Y/N]'$N: $G"$answer"$N)
                read -p "$prompt" answer
                if [ "$answer" == "Y" ]; then
                    echoer "[+] Adding $ip as redirection IP..."
                    rm -f $TEMP $STEMP $PTEMP
                    sed -n '1,79p' $HOST >$PTEMP
                    sed -e '1,78d' <$HOST >$TEMP
                    rm -f $HOST
                    sed -e 's/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/'"${ip}"'/g' $TEMP >$STEMP
                    awk '!a[$0]++' $STEMP >$TEMP
                    cat $PTEMP $TEMP >$HOST
                    rm -f $TEMP $STEMP $PTEMP $LTEMP
                    echoer -e $W'[+] Done'$N
                    echoer -e $W'[+] Make sure to reboot once after applying.'$N
                    sleeper 0.5
                    echoer -e $W'[+] Returning...'$N
                    sleeper 1
                else
                    clearer
                    echoer -n -e $W'[+] RETURNING '$N
                    echoer -n -e $Y'•'$N
                    sleeper 0.2
                    echoer -n -e $Y'•'$N
                    sleeper 0.3
                    echoer -n -e $Y'•'$N
                    sleeper 0.2
                    sleeper 0.1
                fi
            ;;
            # Check Domain In Hosts
            # ----------------------------------------
            chk | check | Check | CHECK | ck) while true; do
                    clearer
                    echoer -e $Y"$divider"$N
                    echoer -e $Y'ϟ C H E C K  D O M A I N'$N
                    sleeper 0.1
                    echoer -e $Y"$divider"$N
                    sleeper 0.1
                    echoer -e "Check any specific domain availability in hosts."
                    echoer -e $Y"$divider"$N
                    echoer ""
                    prompt=$(echo -n -e $W'[+] Enter Domain Name Only:'$N $domain)
                    read -p "$prompt" domain
                    echoer -e $W"[+] Your Domain"$N $Y"$domain"$N
                    if [ ! "$(grep -x "$curip$domain" $HOST)" ]; then
                        echoer -e $R"[×] $domain - "$N$W"is not in the list!"$N
                        sleeper 1
                        prompt=$(echo -n -e $W'[+] Want to block the domain?'$N $Y'[y/n]'$N: $G"$answer"$N)
                        read -p "$prompt" answer
                        if [[ "$answer" == "Y" || "$answer" == "y" ]]; then
                            echoer "[+] Applying $domain as blacklist..."
                            echoer -e "\n# Instant Blacklist Applied on - $date" >>$HOST
                            echoer -e "$curip$domain" >>$HOST
                            echoer -e $Y"$domain "$N$W"- blacklisted."$N
                            sleeper 0.6
                            echoer -e "\n# Applied on - $date" >>$BLACKLIST
                            echoer "$domain" >>$BLACKLIST
                            echoer -e $W'[+] Done'$N
                            echoer -e $W'[+] Make sure to reboot once after applying.'$N
                            sleeper 0.5
                            echoer -e $W'[+] Returning...'$N
                            sleeper 1
                            prompt=$(echo -n -e $W'[+] Check Again?'$N $Y'[Y/N]'$N: $G"$answer"$N)
                            read -p "$prompt" answer
                            if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                                break
                            fi
                            clearer
                        else
                            prompt=$(echo -n -e $W'[+] Check Again?'$N $Y'[y/n]'$N: $G"$answer"$N)
                            read -p "$prompt" answer
                            if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                                break
                            fi
                            clearer
                            echoer -n -e $W'[+] RETURNING...'$N
                        fi
                    else
                        echoer -e $G"[✓] $domain - "$N$W"is in the list!"$N
                        sleeper 1
                        prompt=$(echo -n -e $W'[+] Check Again?'$N $Y'[y/n]'$N: $G"$answer"$N)
                        read -p "$prompt" answer
                        if [[ "$answer" == "N" || "$answer" == "n" ]]; then
                            break
                        fi
                    fi
                done
            ;;
            # Quit
            # ----------------------------------------
            q)
                break
                clearer
                reset
            ;;
            *)
                echoer -e $R"$divider"$N
                echoer -e $R"----------- I N V A L I D  I N P U T ! ----------"$N
                echoer -e $R"$divider"$N
                sleeper 2
            ;;
        esac
    fi
    [ -n "$DIR" ] && apply_pack "$DIR"
    
    $INTERACTIVE || exit 0
done

rm -f $TREADME
echoer "[+] Done!"

if ! $INTERACTIVE; then
    while :; do
        case $1 in
            -h | -\? | --help)
                show_help # Display a usage synopsis.
                exit
            ;;
            -u | --update)
                update_packs
            ;;
            -b | --backup)
                backup_hosts
            ;;
            -c | --clear)
                backup_hosts
                clear_hosts
            ;;
            -r | --restore)
                restore_hosts
            ;;
            -a | --apply)
                if [ "$2" ]; then
                    apply_pack "$2"
                    # shift
                else
                    die 'ERROR: "--apply" requires a pack number.'
                fi
            ;;
            -e | --extension)
                if [ "$2" ]; then
                    apply_extension "$2"
                    # shift
                else
                    die 'ERROR: "--extension" requires an extension argument.'
                fi
            ;;
            -w | --whitelist)
                if [ "$2" ]; then
                    whitelist_domain "$@"
                    # shift $#
                else
                    die 'ERROR: "--file" requires a domain.'
                fi
            ;;
            -m | --blacklist)
                if [ "$2" ]; then
                    blacklist_domain "$@"
                    # shift $#
                else
                    die 'ERROR: "--blacklist" requires a domain.'
                fi
            ;;
            -?*)
                printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
            *) # Should never happen
            break ;;
        esac
        
        # shift
    done
    
    exit 0
fi

# Script Ends
# ----------------------------------------
clearer
sleeper 0.3
echoer -e $Y"$divider"$N
sleeper 0.1
echoer -n -e $Y"---------- "$N$W'S '$N
sleeper 0.1
echoer -n -e $W'T '$N
sleeper 0.1
echoer -n -e $W'A '$N
sleeper 0.1
echoer -n -e $W'Y '$N
sleeper 0.1
echoer -n -e $W' E '$N
sleeper 0.1
echoer -n -e $W'N '$N
sleeper 0.1
echoer -n -e $W'E '$N
sleeper 0.1
echoer -n -e $W'R '$N
sleeper 0.1
echoer -n -e $W'G '$N
sleeper 0.1
echoer -n -e $W'I '$N
sleeper 0.1
echoer -n -e $W'Z '$N
sleeper 0.1
echoer -n -e $W'E '$N
sleeper 0.1
echoer -n -e $W'D '$N
sleeper 0.1
echoer -n -e $Y'ϟ '$N
echoer -e $Y'---------'$N
sleeper 0.1
echoer -e $Y"$divider"$N
echoer ""
sleeper 0.1
